#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdint.h>
 
#define F_CPU 8000000UL
#include <util/delay.h>

uint8_t volatile level = 0;

/*** prototypes ***/
void SPI_init(void);
uint8_t measureLevel(void);


void IO_init(void) {
	DDRD = 0xFF; //set pins 2 on port D as output;
}

void ADC_init(void)
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescaler to 128 - 125KHz sample rate @ 16MHz

	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
	//ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading

	// No MUX values needed to be changed to use ADC0

	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	//ADCSRA |= (1 << ADATE);		//NB need this to enable trigger mode
	ADCSRA |= (1 << ADEN);  // Enable ADC
	//ADCSRA |= (1 << ADSC);  // Start A2D Conversions
	
	//ADCSRB - free running mode
	_delay_ms(1);
}

uint16_t ADC_read(uint8_t ADCchannel)
{
	ADMUX =(ADMUX & 0xF0) | (ADCchannel & 0x0F); //select ADC channel with safety mask
	ADCSRA |= (1<<ADSC);	//single conversion mode
	while(ADCSRA & (1<<ADSC));	//wait for conversion to complete.
	return ADC;
}


// SPI Transmission/reception complete ISR
ISR(SPI_STC_vect)
{
	//PORTD = SPDR;
	SPDR = level;
}

int main (void)
{
	SPI_init();
	ADC_init();
	IO_init();
	sei(); //enable interrupts;
	
	while(1)
	{
		level = measureLevel();
	}
}

// SPI Slave Init
void SPI_init(void) {
	//DDRB=(1<<4); //set MISO as ouput
	//SPCR=(1<<SPE);//|(1<<SPIE); // Enable SPI, set as slave, enable interrupts.
	DDRB &= ~((1<<2)|(1<<3)|(1<<5));   // SCK, MOSI and SS as inputs
    DDRB |= (1<<4);                    // MISO as output

    SPCR &= ~(1<<MSTR);                // Set as slave 
    SPCR |= (1<<SPR0)|(1<<SPR1);       // divide clock by 128
    SPCR |= (1<<SPIE);                 // Enable SPI Interrupt
    SPCR |= (1<<SPE);                  // Enable SPI
}

uint8_t measureLevel(void)
{
	uint16_t sensors[5] = {0};
	for (uint8_t i = 0; i < 5; i++)
	{
		sensors[i] = 0;
		for (uint8_t j = 0; j < 5; j++)
		{
			sensors[i] += ADC_read(i+1)/5;
		}
	}
	
	for (uint8_t i = 0; i < 5; i++)	
	{
		sensors[i] =- 500;	
	}
		
	uint8_t max_pos = 0;
	uint16_t max_val = 0;
	
	for (uint8_t i = 0; i < 5; i++)	
	{
		if (sensors[i] > max_val)
		{
			max_pos = i;
			max_val = sensors[i];
		}	
	}
	
	switch(max_pos)
	{
		case 0:
			return 0;
			break;
		case 1:
			return 25;
			break;
		case 2:
			return 50;
			break;
		case 3:
			return 75;
			break;
		case 4:
			return 100;
			break;
	}
}
